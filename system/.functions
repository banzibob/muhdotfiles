#!/bin/sh
#
# Usage: extract <file>
# Description: extracts archived files / mounts disk images
# Note: .dmg/hdiutil is Mac OS X-specific.
#
# credit: http://nparikh.org/notes/zshrc.txt
extract () {
    if [ -f $1 ]; then
        case $1 in
            *.tar.bz2)  tar -jxvf $1                        ;;
            *.tar.gz)   tar -zxvf $1                        ;;
            *.tar.xz)   unxz $1                             ;;
            *.bz2)      bunzip2 $1                          ;;
            *.dmg)      hdiutil mount $1                    ;;
            *.gz)       gunzip $1                           ;;
            *.tar)      tar -xvf $1                         ;;
            *.tbz2)     tar -jxvf $1                        ;;
            *.tgz)      tar -zxvf $1                        ;;
            *.zip)      unzip $1                            ;;
            *.ZIP)      unzip $1                            ;;
            *.pax)      cat $1 | pax -r                     ;;
            *.pax.Z)    uncompress $1 --stdout | pax -r     ;;
            *.rar)      unrar x $1                          ;;
            *.Z)        uncompress $1                       ;;
            *)          echo "'$1' cannot be extracted/mounted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

function mkd() {
  mkdir -p "$@" && cd "$_"
}

function fd() {
    # fd - cd to selected directory
    local dir
    dir=$(find ${1:-*} -path '*/\.*' -prune -o -type d -print 2> /dev/null | fzf +m) &&
        cd "$dir"
}

function repouserfix() {
    # set repo user to appropriate per the repo origin url
    WORKUSER="sam.stachura"
    WORKEMAIL="sam.stachura@hiscox.com"
    PERSONALUSER="sam"
    PERSONALEMAIL="sam.stachura@gmail.com"
    REMOTE=$(git config --local --get remote.origin.url)
    case $REMOTE in
        "")
            echo "not a repo"
            ;;

        *hiscox*)
            echo "hiscox repo: $REMOTE"
            GITUSEREMAIL=$(git config --local user.email)
            if [ "$GITUSEREMAIL" != "$WORKEMAIL" ]; then
                echo "setting git user to work"
                git config user.name $WORKUSER && git config user.name
                git config user.email $WORKEMAIL && git config user.email
            else
                echo "leaving git local user alone as: $GITUSEREMAIL"
            fi
            ;;

        *)
            echo "personal repo: $REMOTE"
            GITUSEREMAIL=$(git config user.email)
            if [ "$GITUSEREMAIL" != "$PERSONALEMAIL" ]; then
                echo "setting git user to personal"
                git config user.name $PERSONALUSER && git config user.name
                git config user.email $PERSONALEMAIL && git config user.email
            else
                echo "leaving git local user alone as: $GITUSEREMAIL"
            fi
            ;;
    esac
}

function repouserfixdir() {
    # set all repos in working directory to appropriate git user
    for d in ./**/
    do
        (cd "$d" && repouserfix )
        echo " "
    done
}

# Tmux {{{
# Makes creating a new tmux session (with a specific name) easier
function tmuxopen() {
  tmux attach -t $1
}
# Makes creating a new tmux session (with a specific name) easier
function tmuxnew() {
  tmux new -s $1
}
# Makes deleting a tmux session easier
function tmuxkill() {
  tmux kill-session -t $1
}
# }}}
